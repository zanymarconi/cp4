@startuml
class MovieBookingSystem {
    - vector<Movie> movies
    - vector<Cinema> cinemas
    - unique_ptr<ScreeningManager> screeningManager
    + bookTicket()
    + getAvailableSeats()
}
MovieBookingSystem --> ScreeningManager
MovieBookingSystem --> Cinema

class Order {
    - vector<Ticket> tickets
    + getTotalPrice()
}
Order "1" *-- "many" Ticket: has a

class ScreeningManager {
    - map<string, vector<Screening>> screeningsByMovie
    - map<string, vector<Ticket>> ticketsByScreeningId
    + getScreeningForMovie()
    + getAvailableSeatsForScreening()
}
ScreeningManager --> Screening

class Ticket {
    - Screening screening
    - Seat seat
    - double price
}
Ticket --> Screening

class Cinema {
    - string name
    - map<string, Room> roomsByNumber
    + addRoom()
}
Cinema "1" *-- "many" Room: have a

class Screening {
    - string screeningId
    - Movie movie
    - Room room
    - long long startMillis
}
Screening --> Movie
Screening --> Room

class Movie {
    - string title
    - int durationInMinutes
}

class Room {
    - string roomNumber
    - Layout layout
}
Room --> Layout

class Layout {
    - vector<vector<Seat>> seatByPosition
    - map<string, Seat> seatByNumber
    + addSeat()
    + getSeat() // overloaded
    + getAllSeats()
}
Layout "1" --> "many" Seat: has

class Seat {
    - string seatNumber
    - PricingStrategy pricing
}
Seat --> PricingStrategy

abstract PricingStrategy {
    + double getPrice()
}
class NormalRate implements PricingStrategy
class PremiumRate implements PricingStrategy
class VIPRate implements PricingStrategy
@enduml